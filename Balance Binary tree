import java.util.*;

public class Main {

    // TreeNode class
    public static class TreeNode {
        int val;
        TreeNode left, right;
        TreeNode(int val) {
            this.val = val;
        }
    }

    // Solution class
    public static class Solution {
        public TreeNode balanceBST(TreeNode root) {
            List<TreeNode> nodes = new ArrayList<>();
            inorderTraversal(root, nodes);
            return buildBalancedBST(nodes, 0, nodes.size() - 1);
        }

        private void inorderTraversal(TreeNode node, List<TreeNode> nodes) {
            if (node == null) return;
            inorderTraversal(node.left, nodes);
            nodes.add(node);
            inorderTraversal(node.right, nodes);
        }

        private TreeNode buildBalancedBST(List<TreeNode> nodes, int start, int end) {
            if (start > end) return null;
            int mid = (start + end) / 2;
            TreeNode root = nodes.get(mid);
            root.left = buildBalancedBST(nodes, start, mid - 1);
            root.right = buildBalancedBST(nodes, mid + 1, end);
            return root;
        }
    }

    // Function to build tree from user input level-order array
    public static TreeNode buildTreeFromLevelOrder(String[] values) {
        if (values.length == 0 || values[0].equals("null")) return null;

        TreeNode root = new TreeNode(Integer.parseInt(values[0]));
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        int i = 1;

        while (!queue.isEmpty() && i < values.length) {
            TreeNode current = queue.poll();

            if (i < values.length && !values[i].equals("null")) {
                current.left = new TreeNode(Integer.parseInt(values[i]));
                queue.offer(current.left);
            }
            i++;

            if (i < values.length && !values[i].equals("null")) {
                current.right = new TreeNode(Integer.parseInt(values[i]));
                queue.offer(current.right);
            }
            i++;
        }

        return root;
    }

    // Function to print the tree in level-order
    public static List<String> printTreeLevelOrder(TreeNode root) {
        List<String> result = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            TreeNode curr = queue.poll();
            if (curr == null) {
                result.add("null");
                continue;
            }
            result.add(String.valueOf(curr.val));
            queue.offer(curr.left);
            queue.offer(curr.right);
        }

        // Trim trailing nulls
        while (!result.isEmpty() && result.get(result.size() - 1).equals("null")) {
            result.remove(result.size() - 1);
        }

        return result;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the tree in level-order):");
        String input = scanner.nextLine().replaceAll("[\\[\\]\\s]", "");
        String[] nodes = input.split(",");

        TreeNode root = buildTreeFromLevelOrder(nodes);
        Solution solution = new Solution();
        TreeNode balanced = solution.balanceBST(root);
        List<String> output = printTreeLevelOrder(balanced);

        System.out.println("Output: " + output);
    }
}
